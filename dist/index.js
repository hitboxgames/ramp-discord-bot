"use strict";var u=require("discord.js");var f=require("dotenv");(0,f.config)();var{DISCORD_TOKEN:g,RAMP_CLIENT_ID:C,RAMP_CLIENT_SECRET:I,GUILD_ID:R,DISCORD_ID:w}=process.env;if(!g||!C||!I||!R||!w)throw new Error("Missing environment variables");var c={DISCORD_TOKEN:g,DISCORD_ID:w,RAMP_CLIENT_ID:C,RAMP_CLIENT_SECRET:I,GUILD_ID:R};var y=require("discord.js"),P=null,v=null;async function T(e,t,n){let o=await e.guilds.fetch(t),a=(await o.channels.fetch()).find(m=>m?.type===y.ChannelType.GuildText&&m.name===n);if(a)return console.log(`Found existing channel: ${a.name}`),a;let l=await o.channels.create({name:n,type:y.ChannelType.GuildText,reason:`${n} channel required by bot`});return console.log(`Created new channel: ${l.name}`),l}async function M(e,t){let n=await T(e,t,"ramp-transactions");return P=n.id,n}async function p(e,t){let n=await T(e,t,"ramp-business-alerts");return v=n.id,n}var r=require("discord.js");function q(e){return["virtual","physical"].includes(e.toLowerCase())}function b(e){return["daily","monthly","yearly","total"].includes(e.toLowerCase())}function E(e){if(!/^\d{2}\/\d{2}\/\d{4}$/.test(e))return!1;let[n,o,s]=e.split("/").map(Number),a=new Date(s,n-1,o);return a.getMonth()===n-1&&a.getDate()===o&&a.getFullYear()===s}var h=new Map,i={EMPLOYEE:"Employee - Ramp",MANAGER:"Manager - Ramp"};async function x(e){try{let t=await e.roles.fetch(),n=t.find(s=>s.name===i.EMPLOYEE),o=t.find(s=>s.name===i.MANAGER);return n||(console.log(`Creating ${i.EMPLOYEE} role in ${e.name}`),n=await e.roles.create({name:i.EMPLOYEE,color:"Blue",reason:"Required for Ramp bot card requests",permissions:[]})),o||(console.log(`Creating ${i.MANAGER} role in ${e.name}`),o=await e.roles.create({name:i.MANAGER,color:"Green",reason:"Required for Ramp bot card management",permissions:[]})),h.set(e.id,{employeeRoleId:n.id,managerRoleId:o.id}),{employee:n,manager:o}}catch(t){throw console.error(`Error setting up roles in guild ${e.name}:`,t),t}}function D(e){let t=h.get(e.guild.id);return t?e.roles.cache.has(t.employeeRoleId):!1}function L(e){let t=h.get(e.guild.id);return t?e.roles.cache.has(t.managerRoleId):!1}var Z=new r.SlashCommandBuilder().setName("requestcard").setDescription("Request a new card").setDefaultMemberPermissions("0");async function $(e){try{if(!D(e.member)){await e.reply({content:`You need the "${i.EMPLOYEE}" role to request cards.`,ephemeral:!0});return}let t=new r.ModalBuilder().setCustomId("cardRequestModal").setTitle("Request a Card"),n=new r.TextInputBuilder().setCustomId("cardName").setLabel("Card Name").setStyle(r.TextInputStyle.Short).setPlaceholder("Type a card name...").setRequired(!0).setMaxLength(100),o=new r.TextInputBuilder().setCustomId("cardType").setLabel("Card Type (Type: Virtual or Physical)").setStyle(r.TextInputStyle.Short).setPlaceholder("Virtual or Physical").setRequired(!0),s=new r.TextInputBuilder().setCustomId("amount").setLabel("Amount").setStyle(r.TextInputStyle.Short).setPlaceholder("Type an amount").setRequired(!0),a=new r.TextInputBuilder().setCustomId("frequency").setLabel("Reset Frequency (Daily/Monthly/Yearly/Total)").setStyle(r.TextInputStyle.Short).setPlaceholder("Daily, Monthly, Yearly, or Total").setRequired(!0),l=new r.TextInputBuilder().setCustomId("autoLock").setLabel("Auto-lock Date (Optional - MM/DD/YYYY)").setStyle(r.TextInputStyle.Short).setPlaceholder("MM/DD/YYYY").setRequired(!1);t.addComponents(new r.ActionRowBuilder().addComponents(n),new r.ActionRowBuilder().addComponents(o),new r.ActionRowBuilder().addComponents(s),new r.ActionRowBuilder().addComponents(a),new r.ActionRowBuilder().addComponents(l)),await e.showModal(t)}catch(t){console.error("Error creating card request:",t),await e.reply({content:"There was an error processing your request. Please try again.",ephemeral:!0})}}async function S(e){if(e.customId==="cardRequestModal")try{let t=e.fields.getTextInputValue("cardName"),n=e.fields.getTextInputValue("cardType"),o=e.fields.getTextInputValue("amount"),s=e.fields.getTextInputValue("frequency"),a=e.fields.getTextInputValue("autoLock")||"Not specified";if(!q(n)){await e.reply({content:'Invalid card type. Please use "Virtual" or "Physical".',ephemeral:!0});return}if(!b(s)){await e.reply({content:"Invalid frequency. Please use Daily, Monthly, Yearly, or Total.",ephemeral:!0});return}if(a!=="Not specified"&&!E(a)){await e.reply({content:"Invalid date format. Please use MM/DD/YYYY.",ephemeral:!0});return}if(!e.guildId){await e.reply({content:"This command can only be used in a server.",ephemeral:!0});return}let l=await p(e.client,e.guildId);if(!l){await e.reply({content:"Error: Could not find or create the business alerts channel.",ephemeral:!0});return}let m={cardName:t,cardType:n,amount:o,frequency:s,autoLock:a},B=A(e.user.username,m),G=A(e.user.username,m);await N(l,B),await e.reply({content:`Your card request has been submitted:

${G}

Your request is now pending manager approval.`,ephemeral:!0})}catch(t){console.error("Error handling card request:",t),await e.reply({content:"There was an error processing your request. Please try again.",ephemeral:!0})}}function A(e,t){return`${e} is requesting a new card

> **Card Name**: ${t.cardName}
> **Card Type**: ${t.cardType}
> **Amount Limit**: $${t.amount}
> **Reset Frequency**: ${t.frequency}
> **Auto-lock Date**: ${t.autoLock}

`}async function N(e,t){let n=new r.ActionRowBuilder().addComponents(new r.ButtonBuilder().setCustomId("approve_card").setLabel("Approve Card").setStyle(r.ButtonStyle.Success),new r.ButtonBuilder().setCustomId("edit_card").setLabel("Edit").setStyle(r.ButtonStyle.Primary),new r.ButtonBuilder().setCustomId("deny_card").setLabel("Decline Request").setStyle(r.ButtonStyle.Danger));await e.send({content:t,components:[n]})}async function Y(e){if(["approve_card","deny_card"].includes(e.customId)){if(!L(e.member)){await e.reply({content:`You need the "${i.MANAGER}" role to approve/deny requests.`,ephemeral:!0});return}try{let t=e.message,n=e.customId==="approve_card"?"Approved":"Denied",o=n==="Approved"?"\u2705":"\u274C",s=t.content.split(`
`)[0].split(" ")[0],a=await e.guild?.members.cache.find(l=>l.user.username===s);if(await t.edit({content:`${t.content}
**${n} by**: ${e.user.username}
**${n} at**: ${new Date().toLocaleString()}`,components:[]}),a)try{await a.send({content:`Your card request has been ${n.toLowerCase()} by ${e.user.username}.

Original request:
${t.content.split(`
`).slice(0,6).join(`
`)}`})}catch(l){console.error("Could not DM requester:",l)}await e.reply({content:`You have ${n.toLowerCase()} this card request. The requester has been notified.`,ephemeral:!0})}catch(t){console.error("Error handling button interaction:",t),await e.reply({content:"There was an error processing your action.",ephemeral:!0})}}}var d=new u.Client({intents:[u.GatewayIntentBits.Guilds,u.GatewayIntentBits.GuildMembers]});d.once(u.Events.ClientReady,async e=>{console.log(`Ready! Logged in as ${e.user.tag}`);let t=await d.guilds.fetch(c.GUILD_ID);if(!t){console.error("Could not find guild with ID:",c.GUILD_ID);return}await x(t),await M(d,c.GUILD_ID),await p(d,c.GUILD_ID)});d.on(u.Events.InteractionCreate,async e=>{try{e.isChatInputCommand()?e.commandName==="requestcard"&&await $(e):e.isModalSubmit()?await S(e):e.isButton()&&await Y(e)}catch(t){console.error("Error handling interaction:",t)}});d.on(u.Events.Error,e=>{console.error("Discord client error:",e)});d.login(c.DISCORD_TOKEN);
