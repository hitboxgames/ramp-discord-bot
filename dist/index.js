"use strict";var yt=Object.create;var re=Object.defineProperty;var ht=Object.getOwnPropertyDescriptor;var gt=Object.getOwnPropertyNames;var wt=Object.getPrototypeOf,It=Object.prototype.hasOwnProperty;var Ct=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of gt(t))!It.call(e,o)&&o!==r&&re(e,o,{get:()=>t[o],enumerable:!(a=ht(t,o))||a.enumerable});return e};var ae=(e,t,r)=>(r=e!=null?yt(wt(e)):{},Ct(t||!e||!e.__esModule?re(r,"default",{value:e,enumerable:!0}):r,e));var E=require("discord.js");var oe=require("dotenv");(0,oe.config)();var{DISCORD_TOKEN:ne,RAMP_CLIENT_ID:se,RAMP_CLIENT_SECRET:ie,GUILD_ID:le,DISCORD_ID:ce,GOOGLE_SERVICE_ACCOUNT_EMAIL:de,GOOGLE_PRIVATE_KEY:ue,GMAIL_ADDRESS:me,GMAIL_APP_PASSWORD:pe,GOOGLE_SHEETS_ID:fe}=process.env;if(!ne||!se||!ie||!le||!ce||!de||!ue||!me||!pe||!fe)throw new Error("Missing environment variables");var c={DISCORD_TOKEN:ne,DISCORD_ID:ce,RAMP_CLIENT_ID:se,RAMP_CLIENT_SECRET:ie,GUILD_ID:le,GOOGLE_SERVICE_ACCOUNT_EMAIL:de,GOOGLE_PRIVATE_KEY:ue,GMAIL_ADDRESS:me,GMAIL_APP_PASSWORD:pe,GOOGLE_SHEETS_ID:fe};var F=require("discord.js");async function $(e,t,r){let a=await e.guilds.fetch(t),n=(await a.channels.fetch()).find(l=>l?.type===F.ChannelType.GuildText&&l.name===r);if(n)return console.log(`Found existing channel: ${n.name}`),n;let i=await a.channels.create({name:r,type:F.ChannelType.GuildText,reason:`${r} channel required by bot`});return console.log(`Created new channel: ${i.name}`),i}async function q(e,t){return await $(e,t,"ramp-transactions")}async function B(e,t){return await $(e,t,"ramp-business-alerts")}var s=require("discord.js");function H(e){return["virtual","physical"].includes(e.toLowerCase())}function W(e){return["daily","monthly","yearly","total"].includes(e.toLowerCase())}function K(e){if(!/^\d{2}\/\d{2}\/\d{4}$/.test(e))return!1;let[r,a,o]=e.split("/").map(Number),n=new Date(o,r-1,a);return n.getMonth()===r-1&&n.getDate()===a&&n.getFullYear()===o}var j=new Map,h={EMPLOYEE:"Employee - Ramp",MANAGER:"Manager - Ramp",VERIFIED:"Verified - Ramp"};async function ye(e){try{let t=await e.roles.fetch(),r=t.find(n=>n.name===h.EMPLOYEE),a=t.find(n=>n.name===h.MANAGER),o=t.find(n=>n.name===h.VERIFIED);return r||(console.log(`Creating ${h.EMPLOYEE} role in ${e.name}`),r=await e.roles.create({name:h.EMPLOYEE,color:"Blue",reason:"Required for Ramp bot card requests",permissions:[]})),a||(console.log(`Creating ${h.MANAGER} role in ${e.name}`),a=await e.roles.create({name:h.MANAGER,color:"Green",reason:"Required for Ramp bot card management",permissions:[]})),o||(console.log(`Creating ${h.VERIFIED} role in ${e.name}`),o=await e.roles.create({name:h.VERIFIED,color:"Purple",reason:"Required for verified Ramp users",permissions:[]})),j.set(e.id,{employeeRoleId:r.id,managerRoleId:a.id,verifiedRoleId:o.id}),{employee:r,manager:a,verified:o}}catch(t){throw console.error(`Error setting up roles in guild ${e.name}:`,t),t}}function he(e){let t=j.get(e.guild.id);return t?e.roles.cache.has(t.employeeRoleId):!1}function S(e){let t=j.get(e.guild.id);return t?e.roles.cache.has(t.managerRoleId):!1}var J=require("uuid");var v=ae(require("axios"));var z=null,X=null;async function Rt(){try{let e={Accept:"application/json",Authorization:`Basic ${btoa(`${c.RAMP_CLIENT_ID}:${c.RAMP_CLIENT_SECRET}`)}`,"Content-Type":"application/x-www-form-urlencoded"},t=new URLSearchParams({grant_type:"client_credentials",scope:"users:read users:write transactions:read cards:read cards:write"}),r=await v.default.post("https://demo-api.ramp.com/developer/v1/token",t.toString(),{headers:e}),{access_token:a,expires_in:o}=r.data;return z=a,X=Date.now()+o*1e3,console.log("Ramp Access Token fetched successfully"),a}catch(e){throw v.default.isAxiosError(e)?console.error("Failed to fetch Ramp Access Token:",{status:e.response?.status,data:e.response?.data,message:e.message}):console.error("Failed to fetch Ramp Access Token:",e),e}}async function St(){return(!z||X&&Date.now()>=X)&&await Rt(),z}var ge=v.default.create({baseURL:"https://demo-api.ramp.com/developer/v1/"});ge.interceptors.request.use(async e=>{let t=await St();return t&&(e.headers=v.AxiosHeaders.from(e.headers),e.headers.set("Authorization",`Bearer ${t}`)),e},e=>Promise.reject(e));var _=ge;async function P(e,t){try{let r=await _.get("/transactions",{params:{from_date:e,to_date:t,order_by_date_desc:!0}});return r.data?.data?(console.log(`Found ${r.data.data.length} transactions`),r.data.data):(console.log("No transactions found for the specified date range"),[])}catch(r){throw console.error("Error fetching transactions:",r),r}}async function Q(e){try{let t=await _.get("/users",{params:{email:e}});if(!t.data?.data)return console.log("No user found with this specified email"),null;let a=t.data.data.find(o=>o.email.toLowerCase()===e.toLowerCase());return a?(console.log("Found user:",a),a):null}catch(t){throw console.error("Error fetching user:",{status:t.response?.status,message:t.response?.data?.error_v2,email:e}),t}}async function we(e,t,r,a){try{let o=(0,J.v4)(),n={email:e,first_name:t,last_name:r,role:a,idempotency_key:o},i=await _.post("/users/deferred",n);console.log(i),i.status===201?console.log("Async user invite created successfully"):console.error("Failed to create user invite. Response:",i.data)}catch(o){throw console.error("Error inviting user:",{status:o.response?.status,message:o.response?.data?.error_v2}),o}}async function Ie(e,t,r,a,o){try{let n=(0,J.v4)(),i={display_name:r,idempotency_key:n,spending_restrictions:{amount:a,interval:o,lock_date:t},user_id:e},l=await _.post("/cards/deferred/virtual",i);if(l.status===200)return console.log("Virtual card created successfully"),l.data.id;console.error("Failed to create virtual card. Status:",l.status)}catch(n){throw console.error("Error creating virtual card:",{status:n.response?.status,message:n.response?.data?.error_v2}),n}}var Ce=require("google-spreadsheet"),Re=require("google-auth-library");var Se=require("discord.js"),Et=["discordId","rampId","rampRole","email","verifiedAt"],Tt=["key","value","type","description"],vt=["channel_name","channel_id"],bt=new Re.JWT({email:c.GOOGLE_SERVICE_ACCOUNT_EMAIL,key:c.GOOGLE_PRIVATE_KEY.replace(/\\n/g,`
`),scopes:["https://www.googleapis.com/auth/spreadsheets"]}),V=new Ce.GoogleSpreadsheet(c.GOOGLE_SHEETS_ID,bt);async function k(){try{await V.loadInfo();let e=V.sheetsByIndex[0],t=V.sheetsByIndex[1],r=V.sheetsByIndex[2];return console.log(e,t,r),await Z(e,Et),await Z(t,Tt),await Z(r,vt),{verifiedSheet:e,configSheet:t,channelSheet:r}}catch(e){throw console.error("Error initializing sheets:",e),e}}async function Z(e,t){let r=await e.getRows({offset:0,limit:1});(!r||r.length===0)&&(console.log("Setting up config Headers..."),await e.setHeaderRow(t))}async function Ee(){try{let{configSheet:e}=await k();if(!e)throw new Error("Config sheet not found.");let t=await e.getRows(),r={};return t.forEach(a=>{let o=a.get("Key"),n=a.get("Value");switch(a.get("Type")){case"number":r[o]=Number(n);break;case"boolean":r[o]=n.toLowerCase()==="true";break;case"Multiselect":r[o]=n.split(",").map(l=>l.trim());break;default:r[o]=n}}),console.log(r),r}catch(e){throw console.error("Error loading config from sheet:",e),e}}async function Te(e,t,r,a){try{let{verifiedSheet:o}=await k();if((await o.getRows()).find(l=>l.get("discordId")===e||l.get("email").toLowerCase()===t.toLowerCase()))throw console.log("User already verified:",{discordId:e,email:t}),new Error("User already verified");await o.addRow({discordId:e,rampId:r,rampRole:a,email:t,verifiedAt:new Date().toISOString()}),console.log("User verified and added to sheet:",{discordId:e,email:t,rampId:r})}catch(o){throw console.error("Error adding verified user:",o),o}}async function ve(e){try{let{channelSheet:t}=await k();if(!t){console.error("Error: 'Channels' sheet not found in the Google Spreadsheet.");return}let r=e.guilds.cache.get(c.GUILD_ID);if(!r){console.error("Error: Guild not found.");return}let o=r.channels.cache.filter(n=>n.type!==Se.ChannelType.GuildCategory).map(n=>[n.name,n.id]);await t.clear(),await t.setHeaderRow(["Channel Name","Channel ID"]),await t.addRows(o),console.log(`Scanned ${o.length} channels and updated the Google Sheet.`)}catch(t){console.error("Error scanning channels:",t)}}async function be(e){try{let{verifiedSheet:t}=await k(),a=(await t.getRows()).find(o=>o.get("discordId")===e);return a?{discordId:a.get("discordId"),rampId:a.get("rampId"),rampRole:a.get("rampRole"),email:a.get("email"),verifiedAt:a.get("verifiedAt")}:null}catch(t){return console.error("Error getting verified user:",t),null}}var De=new s.SlashCommandBuilder().setName("requestcard").setDescription("Request a new card").setDefaultMemberPermissions("0");async function Me(e){try{if(!he(e.member)&&!S(e.member)){await e.reply({content:`You need the "${h.EMPLOYEE}" or "${h.MANAGER}" role to request cards.`,ephemeral:!0});return}let t=new s.ModalBuilder().setCustomId("cardRequestModal").setTitle("Request a Card"),r=new s.TextInputBuilder().setCustomId("cardName").setLabel("Name").setStyle(s.TextInputStyle.Short).setPlaceholder("Type a card name...").setMaxLength(100),a=new s.TextInputBuilder().setCustomId("cardType").setLabel("Card Type (Only Virtual supported currently)").setStyle(s.TextInputStyle.Short).setPlaceholder("Virtual").setRequired(!0),o=new s.TextInputBuilder().setCustomId("amount").setLabel("Amount").setStyle(s.TextInputStyle.Short).setPlaceholder("Type an amount").setRequired(!0),n=new s.TextInputBuilder().setCustomId("frequency").setLabel("Frequency (Daily/Monthly/Yearly/Total)").setStyle(s.TextInputStyle.Short).setPlaceholder("Daily, Monthly, Yearly, or Total").setRequired(!0),i=new s.TextInputBuilder().setCustomId("autoLock").setLabel("Until When?").setStyle(s.TextInputStyle.Short).setPlaceholder("MM/DD/YYYY");t.addComponents(new s.ActionRowBuilder().addComponents(r),new s.ActionRowBuilder().addComponents(a),new s.ActionRowBuilder().addComponents(o),new s.ActionRowBuilder().addComponents(n),new s.ActionRowBuilder().addComponents(i)),await e.showModal(t)}catch(t){console.error("Error creating card request:",t),await e.reply({content:"There was an error processing your request. Please try again.",ephemeral:!0})}}async function xe(e){if(e.customId==="cardRequestModal")try{let t=e.fields.getTextInputValue("cardName"),r=e.fields.getTextInputValue("cardType"),a=e.fields.getTextInputValue("amount"),o=e.fields.getTextInputValue("frequency"),n=e.fields.getTextInputValue("autoLock")||"Not specified";if(!H(r)){await e.reply({content:'Invalid card type. Please use "Virtual" or "Physical".',ephemeral:!0});return}if(!W(o)){await e.reply({content:"Invalid frequency. Please use Daily, Monthly, Yearly, or Total.",ephemeral:!0});return}if(n!=="Not specified"&&!K(n)){await e.reply({content:"Invalid date format. Please use MM/DD/YYYY.",ephemeral:!0});return}if(!e.guildId){await e.reply({content:"This command can only be used in a server.",ephemeral:!0});return}let i=await B(e.client,e.guildId);if(!i){await e.reply({content:"Error: Could not find or create the business alerts channel.",ephemeral:!0});return}let l={cardName:t,cardType:r,amount:a,frequency:o,autoLock:n};try{await e.user.send({content:`\u{1F389} You requested the following card:
  
> **Card Name**: ${t}
> **Card Type**: ${r}
> **Spend Limit**: $${a} ${o}
> **Auto Lock**: ${n}`})}catch(d){console.error("Could not send DM to user:",d)}let g=_e(e.user.username,l);await Dt(i,g),await e.deferUpdate()}catch(t){console.error("Error handling card request:",t),await e.reply({content:"There was an error processing your request. Please try again.",ephemeral:!0})}}function _e(e,t){return`${e} is requesting a new card.

> **Card Name**: ${t.cardName}
> **Card Type**: ${t.cardType}
> **Spend Limit**: $${t.amount}
> **Reset Frequency**: ${t.frequency}
> **Auto Lock**: ${t.autoLock}

`}async function Dt(e,t){let r=new s.ActionRowBuilder().addComponents(new s.ButtonBuilder().setCustomId("approve_card").setLabel("Approve Card").setStyle(s.ButtonStyle.Success),new s.ButtonBuilder().setCustomId("edit_card").setLabel("Edit").setStyle(s.ButtonStyle.Primary),new s.ButtonBuilder().setCustomId("deny_card").setLabel("Decline Request").setStyle(s.ButtonStyle.Danger));await e.send({content:t,components:[r]})}async function Le(e){if(!["approve_card","deny_card","edit_card","cancel_edit","edit_and_approve"].includes(e.customId))return;if(!S(e.member)){await e.reply({content:`You need the "${h.MANAGER}" role to manage requests.`,ephemeral:!0});return}let t=e.message;if(e.customId==="edit_card"){let C=t.content.split(`
`),x=C.find(w=>w.includes("Card Name"))?.split(":")[1]?.trim()||"",Y=C.find(w=>w.includes("Card Type"))?.split(":")[1]?.trim()||"",it=C.find(w=>w.includes("Amount Limit"))?.split("$")[1]?.split(" ")[0]||"",lt=C.find(w=>w.includes("Reset Frequency"))?.split(":")[1]?.trim()||"",ct=C.find(w=>w.includes("Auto-lock Date"))?.split(":")[1]?.trim()||"",te=new s.ModalBuilder().setCustomId("editCardModal").setTitle("Edit Card Request"),dt=new s.TextInputBuilder().setCustomId("cardName").setLabel("Name").setStyle(s.TextInputStyle.Short).setValue(x),ut=new s.TextInputBuilder().setCustomId("cardType").setLabel("Card Type (Virtual or Physical)").setStyle(s.TextInputStyle.Short).setValue(Y).setRequired(!0),mt=new s.TextInputBuilder().setCustomId("amount").setLabel("Amount").setStyle(s.TextInputStyle.Short).setValue(it).setRequired(!0),pt=new s.TextInputBuilder().setCustomId("frequency").setLabel("Frequency (Daily/Monthly/Yearly/Total)").setStyle(s.TextInputStyle.Short).setValue(lt).setRequired(!0),ft=new s.TextInputBuilder().setCustomId("autoLock").setLabel("Until When? (MM/DD/YYYY)").setStyle(s.TextInputStyle.Short).setValue(ct);te.addComponents(new s.ActionRowBuilder().addComponents(dt),new s.ActionRowBuilder().addComponents(ut),new s.ActionRowBuilder().addComponents(mt),new s.ActionRowBuilder().addComponents(pt),new s.ActionRowBuilder().addComponents(ft)),await e.showModal(te);return}if(e.customId==="cancel_edit"){await t.edit({components:[new s.ActionRowBuilder().addComponents(new s.ButtonBuilder().setCustomId("approve_card").setLabel("Approve Card").setStyle(s.ButtonStyle.Success),new s.ButtonBuilder().setCustomId("edit_card").setLabel("Edit").setStyle(s.ButtonStyle.Primary),new s.ButtonBuilder().setCustomId("deny_card").setLabel("Decline Request").setStyle(s.ButtonStyle.Danger))]}),await e.reply({content:"Edit cancelled.",ephemeral:!0});return}let r=e.customId==="approve_card"?"approved":e.customId==="deny_card"?"declined":e.customId==="edit_and_approve"?"approved with edits":"",a=t.content.split(`
`)[0].split(" ")[0],o=await e.guild?.members.cache.find(u=>u.user.username===a),n=new Date,i=n.toLocaleDateString(),l=n.toLocaleTimeString(),g=t.content.split(`
`),d=g.find(u=>u.includes("Card Name"))?.split(":")[1]?.trim()||"",m=g.find(u=>u.includes("Card Type"))?.split(":")[1]?.trim()||"",M=parseFloat(g.find(u=>u.includes("Spend Limit")||u.includes("Amount Limit"))?.split("$")[1]?.trim()||"0"),T=g.find(u=>u.includes("Reset Frequency"))?.split(":")[1]?.trim()||"",R=g.find(u=>u.includes("Auto Lock")||u.includes("Auto-lock"))?.split(":")[1]?.trim()||"",A;if(R&&R!=="Not specified"){let[u,C,x]=R.split("/");A=new Date(parseInt(x,10),parseInt(u,10)-1,parseInt(C,10)).toISOString()}let N=`> **Card Name**: ${d}
> **Card Type**: ${m}
> **Amount Limit**: ${M}
> **Reset Frequency**: ${T}
> **Auto Lock**: ${R}`,O=`${a}'s card was ${r}.

${N}

**${a}'s card request was ${r} by ${e.user.username} on ${i} at ${l}.**`;if(await t.edit({content:O,components:[]}),o)try{await o.send({content:`\u{1F389} **Your card request has been ${r} by ${e.user.username} on ${i} at ${l}**.

${N}`})}catch(u){console.error("Could not DM requester:",u)}let U=o?.id;if(!U)throw new Error("No requester Id, what type of thievery is this");let st=await be(U);if(U)try{if(m.toLowerCase()==="virtual"){let u=await Ie(st?.rampId,A,d,M.toString(),T.toUpperCase()),x=new s.ButtonBuilder().setLabel("View Card Details").setStyle(s.ButtonStyle.Link).setURL("https://demo.ramp.com/cards/virtual-cards"),Y=new s.ActionRowBuilder().addComponents(x);await e.reply({content:`You have ${r} this card request. The requester has been notified.`,components:[Y],ephemeral:!0})}else await e.reply({content:`You have ${r} this card request, but only virtual cards are currently supported.`,ephemeral:!0})}catch(u){console.error("Error creating card:",u),await e.reply({content:`You have ${r} this card request, but there was an error creating the card. Please check the logs.`,ephemeral:!0})}}async function Ae(e){if(e.customId==="editCardModal")try{let t=e.fields.getTextInputValue("cardName"),r=e.fields.getTextInputValue("cardType"),a=e.fields.getTextInputValue("amount"),o=e.fields.getTextInputValue("frequency"),n=e.fields.getTextInputValue("autoLock")||"Not specified";if(!H(r)){await e.reply({content:'Invalid card type. Please use "Virtual" or "Physical".',ephemeral:!0});return}if(!W(o)){await e.reply({content:"Invalid frequency. Please use Daily, Monthly, Yearly, or Total.",ephemeral:!0});return}if(n!=="Not specified"&&!K(n)){await e.reply({content:"Invalid date format. Please use MM/DD/YYYY.",ephemeral:!0});return}let i=e.message;if(!i)return;let l=i.content.split(`
`)[0].split(" ")[0],d=_e(l,{cardName:t,cardType:r,amount:a,frequency:o,autoLock:n}),m=new s.ActionRowBuilder().addComponents(new s.ButtonBuilder().setCustomId("edit_and_approve").setLabel("Edit and Approve").setStyle(s.ButtonStyle.Success),new s.ButtonBuilder().setCustomId("cancel_edit").setLabel("Cancel").setStyle(s.ButtonStyle.Secondary));await i.edit({content:d,components:[m]}),await e.reply({content:"Card request updated. You can now approve the edited request or cancel.",ephemeral:!0})}catch(t){console.error("Error handling edit modal submit:",t),await e.reply({content:"There was an error processing your edit. Please try again.",ephemeral:!0})}}var p=require("discord.js");var Ne=ae(require("nodemailer"));var b=new Map,Mt=Ne.default.createTransport({service:"gmail",auth:{user:c.GMAIL_ADDRESS,pass:c.GMAIL_APP_PASSWORD}});async function $e(e,t){try{let r=Math.floor(1e5+Math.random()*9e5).toString();return b.set(e,{code:r,email:t,expires:new Date(Date.now()+15*60*1e3)}),await Mt.sendMail({from:c.GMAIL_ADDRESS,to:t,subject:"Verify Your Ramp Discord Integration",html:`
        <h2>Ramp Bot Verfication Code</h2>
        <p>Your verification code is: <strong>${r}</strong></p>
        <p>This code will expire in 15 minutes.</p>
        <p>If you didn't request this code, please ignore this email.</p>
      `}),!0}catch(r){return console.error("Error sending verification email:",r),!1}}function qe(e,t){let r=b.get(e);return r?new Date>r.expires?(b.delete(e),{valid:!1,message:"Verification code has expired. Please request a new one."}):r.code!==t?{valid:!1,message:"Invalid verification code. Please try again."}:(b.delete(e),{valid:!0,email:r.email,message:"Code verified successfully!"}):{valid:!1,message:"No verification code found. Please request a new one."}}setInterval(()=>{let e=new Date;for(let[t,r]of b.entries())e>r.expires&&b.delete(t)},5*60*1e3);var Be=new p.SlashCommandBuilder().setName("verify").setDescription("Verify your Ramp account");async function Pe(e){try{let t=new p.ModalBuilder().setCustomId("verifyEmailModal").setTitle("Verify Your Ramp Email"),r=new p.TextInputBuilder().setCustomId("email").setLabel("Enter your Ramp email address").setStyle(p.TextInputStyle.Short).setPlaceholder("user@company.com").setRequired(!0);t.addComponents(new p.ActionRowBuilder().addComponents(r)),await e.showModal(t)}catch(t){console.error("Error showing verify modal:",t),await e.reply({content:"There was an error starting verification. Please try again.",ephemeral:!0})}}async function Ve(e){try{let t=e.fields.getTextInputValue("email").toLowerCase();if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t)){await e.reply({content:"Please enter a valid email address.",ephemeral:!0});return}if(!await Q(t)){await e.reply({content:"This email is not associated with any Ramp account. Please make sure you've been invited to Ramp first.",ephemeral:!0});return}if(!await $e(e.user.id,t)){await e.reply({content:"Failed to send verification email. Please try again later.",ephemeral:!0});return}let n=new p.ActionRowBuilder().addComponents(new p.ButtonBuilder().setCustomId("enterVerificationCode").setLabel("Enter Verification Code").setStyle(p.ButtonStyle.Primary));await e.reply({content:"A verification code has been sent to your email. Click the button below to enter it.",components:[n],ephemeral:!0})}catch(t){console.error("Error in email verification:",t),e.replied||await e.reply({content:"There was an error processing your verification. Please try again.",ephemeral:!0})}}async function ke(e){let t=new p.ModalBuilder().setCustomId("verifyCodeModal").setTitle("Enter Verification Code"),r=new p.TextInputBuilder().setCustomId("code").setLabel("Enter the code sent to your email").setStyle(p.TextInputStyle.Short).setPlaceholder("Enter 6-digit code").setRequired(!0);t.addComponents(new p.ActionRowBuilder().addComponents(r)),await e.showModal(t)}async function Ge(e){try{let t=e.fields.getTextInputValue("code"),r=qe(e.user.id,t);if(!r.email)throw Error;if(!r.valid){await e.reply({content:r.message,ephemeral:!0});return}await e.deferReply({ephemeral:!0});let a=await Q(r.email);if(!a||!a.id||!a.role)throw new Error("Ramp user or user ID not found during verification.");await Te(e.user.id,r.email,a.id,a.role);let o=e.member,n=e.guild?.roles.cache.find(l=>l.name===h.VERIFIED),i=e.guild?.roles.cache.find(l=>l.name===h.EMPLOYEE);if(!n||!i)throw new Error("Verified or Employee role not found");await o.roles.add([n,i]),await e.editReply({content:"\u2705 Your email has been verified! You now have access to Ramp commands."})}catch(t){console.error("Error in code verification:",t),!e.replied&&!e.deferred?await e.reply({content:"There was an error completing your verification. Please try again.",ephemeral:!0}):await e.editReply({content:"There was an error completing your verification. Please try again."})}}var L=require("discord.js");var f=require("discord.js");var Oe={USER:"BUSINESS_USER"};var Ue=new f.SlashCommandBuilder().setName("invite").setDescription("Invite a new user to Ramp").setDefaultMemberPermissions("0");async function Ye(e){try{if(!S(e.member)){await e.reply({content:`You need the "${h.MANAGER}" role to invite users.`,ephemeral:!0});return}let t=new f.ModalBuilder().setCustomId("inviteModal").setTitle("Invite User to Ramp"),r=new f.TextInputBuilder().setCustomId("email").setLabel("Email").setStyle(f.TextInputStyle.Short).setPlaceholder("user@company.com").setRequired(!0),a=new f.TextInputBuilder().setCustomId("firstName").setLabel("First Name").setStyle(f.TextInputStyle.Short).setPlaceholder("Enter first name").setRequired(!0),o=new f.TextInputBuilder().setCustomId("lastName").setLabel("Last Name").setStyle(f.TextInputStyle.Short).setPlaceholder("Enter last name").setRequired(!0),n=new f.TextInputBuilder().setCustomId("role").setLabel("Role (ADMIN, USER, BOOKKEEPER)").setStyle(f.TextInputStyle.Short).setPlaceholder("Enter role").setRequired(!0);t.addComponents(new f.ActionRowBuilder().addComponents(r),new f.ActionRowBuilder().addComponents(a),new f.ActionRowBuilder().addComponents(o),new f.ActionRowBuilder().addComponents(n)),await e.showModal(t)}catch(t){console.error("Error creating invite modal:",t),await e.reply({content:"There was an error processing your request. Please try again.",ephemeral:!0})}}async function Fe(e){if(e.customId==="inviteModal")try{let t=e.fields.getTextInputValue("email"),r=e.fields.getTextInputValue("firstName"),a=e.fields.getTextInputValue("lastName"),o=e.fields.getTextInputValue("role").toUpperCase();if(!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(t)){await e.reply({content:"Please enter a valid email address.",ephemeral:!0});return}let i=Oe[o];if(!i){await e.reply({content:"Invalid role. Please use User role.",ephemeral:!0});return}try{await we(t,r,a,i),await e.reply({content:`\u2705 Invite sent successfully to ${r} ${a} (${t}) as ${i}. 
        Please let them know once they accept, to do /verify on discord to connect their Ramp account.`,ephemeral:!0})}catch(l){console.error("Error sending invite:",l),await e.reply({content:"There was an error sending the invite. Please try again.",ephemeral:!0})}}catch(t){console.error("Error handling invite modal submit:",t),await e.reply({content:"There was an error processing your request. Please try again.",ephemeral:!0})}}var Ze=require("discord.js");var y=require("date-fns");function He(){let e=new Date,t=(0,y.startOfMinute)((0,y.subMinutes)(e,5)),r=(0,y.startOfMinute)(e);return{fromDate:t,toDate:r}}function We(){let e=(0,y.startOfDay)(new Date),t=(0,y.endOfDay)(new Date);return{fromDate:e,toDate:t}}function Ke(){let e=(0,y.subDays)(new Date,1),t=(0,y.startOfDay)(e),r=(0,y.endOfDay)(e);return{fromDate:t,toDate:r}}function je(){let e=(0,y.startOfDay)((0,y.subDays)(new Date,7)),t=(0,y.endOfDay)(new Date);return{fromDate:e,toDate:t}}function ze(){let e=(0,y.startOfDay)((0,y.subDays)(new Date,30)),t=(0,y.endOfDay)(new Date);return{fromDate:e,toDate:t}}var D=require("discord.js");var ee=null;async function Xe(){return ee||(console.log("Loading configuration from sheet..."),ee=await Ee()),ee}async function Je(e,t,r){if(!t?.length){await e.send("No transactions found for the specified period.");return}let a=t.reduce((d,m)=>d+m.amount,0),o={},n={};t.forEach(d=>{let{card_holder:m,amount:M,sk_category_name:T}=d;if(m&&m.user_id){let{user_id:R,first_name:A,last_name:N}=m,O=`${A} ${N}`;o[R]={name:O,amount:(o[R]?.amount||0)+M}}T&&(n[T]=(n[T]||0)+M)});let i=Object.values(o).sort((d,m)=>m.amount-d.amount).slice(0,3),l=Object.entries(n).sort((d,m)=>m[1]-d[1]).slice(0,3).map(([d,m])=>({categoryName:d,amount:m})),g=`
    ${r}
    > **Total Amount Spent:** ${G(a)}
    > **Top Spenders:**
    ${i.map((d,m)=>`> ${m+1}. ${d.name}: ${G(d.amount)}`).join(`
`)}
    > **Top Categories:**
    ${l.map((d,m)=>`> ${m+1}. ${d.categoryName}: ${G(d.amount)}`).join(`
`)}
    `;await e.send(g)}async function Qe(e,t){let{TEXT_CHANNEL_ALERTS:r}=await Xe();if(!r||r.length===0){console.error("No channels specified in TEXT_CHANNEL_ALERTS");return}for(let a of r){let o=c.GUILD_ID,n=await $(e,o,a);if(!n){console.error(`Channel ${a} could not be found or created`);continue}for(let i of t){let{content:l,components:g}=xt(i);try{await n.send({content:l,components:g}),console.log(`Transaction alert sent to channel: ${a}`)}catch(d){console.error(`Error sending message to ${a}:`,d)}}}}function xt(e){if(!e)throw new Error("No transaction data provided");let r=`
> **Card Holder**: ${e.card_holder?`${e.card_holder.first_name||""} ${e.card_holder.last_name||""}`.trim():"N/A"}
> **Amount**: ${G(e.amount)} ${e.currency_code||"USD"}
> **Merchant**: ${e.merchant_name||"N/A"}
> **Category**: ${e.sk_category_name||"N/A"}`,a=new D.ButtonBuilder().setLabel("View Transaction").setStyle(D.ButtonStyle.Link).setURL(`https://demo.ramp.com/expenses/transactions/${e.id}`),o=new D.ActionRowBuilder().addComponents(a);return{content:r,components:[o]}}function G(e){if(e==null)return"N/A";try{return new Intl.NumberFormat("en-US",{style:"currency",currency:"USD"}).format(e)}catch{return`$${e}`}}var et=new Ze.SlashCommandBuilder().setName("report").setDescription("Generate a report for transactions").addStringOption(e=>e.setName("period").setDescription("Select the time period for the report").setRequired(!0).addChoices({name:"Today",value:"today"},{name:"Yesterday",value:"yesterday"},{name:"Last Week",value:"lastWeek"},{name:"Last Month",value:"lastMonth"}));async function tt(e){try{if(!S(e.member)){await e.reply({content:"You must have the manager role to use this command.",ephemeral:!0});return}await e.deferReply({ephemeral:!0});let t=e.options.getString("period");if(!t){await e.editReply("Please select a valid time period.");return}let r,a;switch(t){case"today":r=We(),a="Your daily business spending report is available!";break;case"yesterday":r=Ke(),a="Yesterday's business spending report is available!";break;case"lastWeek":r=je(),a="Your weekly business spending report is available!";break;case"lastMonth":r=ze(),a="Your monthly business spending report is available!";break;default:await e.editReply("Invalid time period selected.");return}let o=await P(r.fromDate,r.toDate),n=await q(e.client,e.guildId);if(!n){await e.editReply("Failed to access the transactions channel. Please try again later.");return}await Je(n,o,a),await e.editReply(`${a} has been generated and sent to the transactions channel.`)}catch(t){console.error("Error generating report:",t),await e.editReply("An error occurred while generating the report. Please try again later.")}}async function rt(){try{let e=new Map;[De,Be,Ue,et].forEach(a=>{e.set(a.name,a)});let t=Array.from(e.values()).map(a=>a.toJSON());console.log("Commands to be deployed:",t.map(a=>a.name));let r=new L.REST().setToken(c.DISCORD_TOKEN);console.log("Started refreshing application (/) commands."),await r.put(L.Routes.applicationGuildCommands(c.DISCORD_ID,c.GUILD_ID),{body:[]}),await r.put(L.Routes.applicationGuildCommands(c.DISCORD_ID,c.GUILD_ID),{body:t}),console.log("Successfully reloaded application (/) commands.")}catch(e){throw console.error("Error deploying commands:",e),e}}var at=new Set;async function ot(e){let{fromDate:t,toDate:r}=He();console.log(`Fetching transactions from ${t} to ${r}`);try{let o=(await P(t,r)).filter(n=>at.has(n.id)?!1:(at.add(n.id),!0));o.length>0?(console.log("New transactions found:",o),await Qe(e,o)):console.log("No new transactions found.")}catch(a){console.error("Error during transaction monitoring:",a)}}async function nt(e){await ot(e),setInterval(async()=>{await ot(e)},5*60*1e3)}var I=new E.Client({intents:[E.GatewayIntentBits.Guilds]}),_t=async e=>{try{e.isAutocomplete()||await e.reply({content:"There was an error processing your request. Please try again.",ephemeral:!0})}catch(t){console.error("Error sending error message:",t)}};I.once(E.Events.ClientReady,async e=>{console.log(`Ready! Logged in as ${e.user.tag}`);let t=await I.guilds.fetch(c.GUILD_ID);if(!t){console.error("Could not find guild with ID:",c.GUILD_ID);return}await rt(),await ye(t),await nt(I),await ve(I),await q(I,c.GUILD_ID),await B(I,c.GUILD_ID)});I.on("interactionCreate",async e=>{try{if(e.isModalSubmit())switch(e.customId){case"cardRequestModal":await xe(e);break;case"editCardModal":await Ae(e);break;case"verifyEmailModal":await Ve(e);break;case"verifyCodeModal":await Ge(e);break;case"inviteModal":await Fe(e);break}else if(e.isButton())switch(e.customId){case"enterVerificationCode":await ke(e);break;case"approve_card":case"deny_card":case"edit_card":case"cancel_edit":case"edit_and_approve":await Le(e);break}else if(e.isChatInputCommand())switch(e.commandName){case"requestcard":await Me(e);break;case"verify":await Pe(e);break;case"invite":await Ye(e);break;case"report":await tt(e);break}}catch(t){console.error("Error handling interaction:",t),(e.isCommand()||e.isModalSubmit()||e.isButton())&&await _t(e)}});I.on(E.Events.Error,e=>{console.error("Discord client error:",e)});I.login(c.DISCORD_TOKEN);
